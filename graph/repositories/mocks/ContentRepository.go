// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "go-cms-gql/graph/model"

	mock "github.com/stretchr/testify/mock"
)

// ContentRepository is an autogenerated mock type for the ContentRepository type
type ContentRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, input
func (_m *ContentRepository) Create(ctx context.Context, input model.NewContent) (*model.Content, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Content
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.NewContent) (*model.Content, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.NewContent) *model.Content); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Content)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.NewContent) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, input
func (_m *ContentRepository) Delete(ctx context.Context, input model.DeleteContent) (bool, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.DeleteContent) (bool, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.DeleteContent) bool); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.DeleteContent) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, keyword
func (_m *ContentRepository) GetAll(ctx context.Context, keyword string) ([]*model.Content, error) {
	ret := _m.Called(ctx, keyword)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*model.Content
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.Content, error)); ok {
		return rf(ctx, keyword)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Content); ok {
		r0 = rf(ctx, keyword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Content)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, keyword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCategoryID provides a mock function with given fields: ctx, categoryID
func (_m *ContentRepository) GetByCategoryID(ctx context.Context, categoryID string) ([]*model.Content, error) {
	ret := _m.Called(ctx, categoryID)

	if len(ret) == 0 {
		panic("no return value specified for GetByCategoryID")
	}

	var r0 []*model.Content
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.Content, error)); ok {
		return rf(ctx, categoryID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Content); ok {
		r0 = rf(ctx, categoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Content)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, categoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, contentID
func (_m *ContentRepository) GetByID(ctx context.Context, contentID string) (*model.Content, error) {
	ret := _m.Called(ctx, contentID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.Content
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Content, error)); ok {
		return rf(ctx, contentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Content); ok {
		r0 = rf(ctx, contentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Content)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, contentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUser provides a mock function with given fields: ctx
func (_m *ContentRepository) GetByUser(ctx context.Context) ([]*model.Content, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetByUser")
	}

	var r0 []*model.Content
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.Content, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Content); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Content)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, input
func (_m *ContentRepository) Update(ctx context.Context, input model.EditContent) (*model.Content, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *model.Content
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.EditContent) (*model.Content, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.EditContent) *model.Content); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Content)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.EditContent) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewContentRepository creates a new instance of ContentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContentRepository {
	mock := &ContentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
